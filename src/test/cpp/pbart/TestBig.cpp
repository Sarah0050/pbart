/*
 *  Copyright (c) 2014-2016 olibre (olibre@Lmap.org)
 *
 *  This file is part of the program Pbart - Protocol Buffers at Runtime.
 *
 *  Pbart is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License (AGPL)
 *  version 3 or (at your option) any later version.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with Pbart (maybe in file LICENSE).
 *  If not, see <http://www.gnu.org/licenses/>.
 */

#include "pbart/Serializer.h"
#include "pbart/Message.h"
#include "pbart/Dico.h"
#include DICO_BIG_PROTOBUF_HEADER

#include <cppunit/extensions/HelperMacros.h>

extern std::string global_directory; // defined in main.cpp

// stub (bouchon)
namespace synapse
{
struct message   {  enum { emtCrossExecMsg                               };  };
struct common    {  enum { EUR                                           };  };
struct business  {  enum { epctForce, esdShortLocate, esdShortSellExempt };
                    struct order     {  enum { etmDMA, ebtTotalReturnSwap, emiCash           };  };  };
struct misc      {  enum { efsForce, ebcCrdsCode, ebsBooked              };  };
}

class Big : public CPPUNIT_NS::TestFixture
{
    //--------------------------------------------------------------------------
    CPPUNIT_TEST_SUITE( Big  );
    CPPUNIT_TEST( Init       );
    CPPUNIT_TEST( Encode     );
    CPPUNIT_TEST( Decode     );
    CPPUNIT_TEST( Compare    );
    CPPUNIT_TEST_SUITE_END();

    //---------------------------------------------------------------------------
    pbart::Message originalMessage;
    pbart::Buffer  bufferEncodedFromOriginal;
    pbart::Message messageDecodedFromBuffer;

    //---------------------------------------------------------------------------
    // fills -> bufferEncodedFromOriginal
    void Encode()
    {
        pbart::Serializer  serializer;
        serializer.loadDico( global_directory + "dico-Big.xml" );

        Init(); // populates -> originalMessage
        CPPUNIT_ASSERT_NO_THROW( serializer.encode (originalMessage, bufferEncodedFromOriginal, false) );
    }

    //-----------------------------------------------------------------------------
    // populates -> messageDecodedFromBuffer
    void Decode()
    {
        pbart::Serializer  serializer;
        serializer.loadDico( global_directory + "dico-Big.xml" );

        Encode(); // calls Init() + fills -> bufferEncodedFromOriginal
        messageDecodedFromBuffer = serializer.message();
        serializer.decode (bufferEncodedFromOriginal, messageDecodedFromBuffer);

        CPPUNIT_ASSERT_EQUAL( originalMessage, messageDecodedFromBuffer );
    }

    //---------------------------------------------------------------------------
    // Use generated functions from *.proto file (generated by protoc)
    std::string EncodeUsingProtoc();
    bool        DecodeUsingProtoc (const std::string& data);

    //-----------------------------------------------------------------------------
    // compare Messages produced by PBART and by the generated *.proto files
    void Compare()
    {
        // fills -> bufferProtoc
        std::string bufferProtoc = EncodeUsingProtoc();

        pbart::Serializer  serializer;
        serializer.loadDico( global_directory + "dico-Big.xml" );
        const pbart::Id  uEventData = serializer.dico()->id("UEventData");

        pbart::Message messageFromPb;

        CPPUNIT_ASSERT_THROW(
                    messageFromPb = serializer.decode (bufferProtoc),
                    pbart::DecodeException );

        messageFromPb = serializer.message (uEventData);
        serializer.decode (bufferProtoc, messageFromPb);

        Encode(); // populates -> originalMessage + fills -> bufferEncodedFromOriginal
        CPPUNIT_ASSERT_EQUAL (originalMessage, messageFromPb);

        bool ok = DecodeUsingProtoc (bufferEncodedFromOriginal);
        CPPUNIT_ASSERT_EQUAL (true, ok);

        int sizeProtoc = bufferProtoc             .size();
        int sizePBART    = bufferEncodedFromOriginal.size();
        int sizeHeader = 3 + serializer.dico()->header().size();
        CPPUNIT_ASSERT_EQUAL (sizePBART, sizeHeader + sizeProtoc);

        const char* ptrProtoc =   bufferProtoc.data();
        const char* ptrPBART    = & bufferEncodedFromOriginal.data() [sizeHeader];
        for (int i=0; i<sizeProtoc; ++i)
        {
            std::ostringstream oss; oss <<"PBART and Protoc buffers differ at position="<< i;
            CPPUNIT_ASSERT_EQUAL_MESSAGE (oss.str(), ptrProtoc[i], ptrPBART[i]);
        }
    }

    //--------------------------------------------------------------------------
    inline
    pbart::Message& addEmptySubMsg (pbart::Message& msg, pbart::Id id)
    {
        return msg.get(id).toMessage();
    }

    //--------------------------------------------------------------------------
    inline
    pbart::Variant::SeqMessage& addEmptySeqMsg (pbart::Message& msg, pbart::Id id)
    {
        return msg.get(id).toSeqMessage();
    }

    //---------------------------------------------------------------------------
    // populates -> originalMessage
    void Init()
    {
        pbart::Serializer  serializer;
        serializer.loadDico( global_directory + "dico-Big.xml" );

        const pbart::Dico& dico = * serializer.dico();
        const pbart::Id  uEventData                = dico.id("UEventData");
        const pbart::Id  stOrderId                 = dico.id("StClientOrderInternalSectionMsg");
        const pbart::Id  rootId                    = dico.id("StRoot");
        const pbart::Id  fidId                     = dico.id("synapse::misc::StFid");
        const pbart::Id  iSectionId                = dico.id("synapse::obs::client::cash::StOrderDefInternalSection");
        const pbart::Id  clientIdId                = dico.id("synapse::obs::client::StClientId");
        const pbart::Id  msgType                   = dico.id("EMessageType");
        const pbart::Id  eventId                   = dico.id("eventId");
        const pbart::Id  StRdvStatistics           = dico.id("StRdvStatistics");
        const pbart::Id  type                      = dico.id("type");
        const pbart::Id  eventName                 = dico.id("eventName"           );
        const pbart::Id  subEventName              = dico.id("subEventName"        );
        const pbart::Id  transientData             = dico.id("transientData"       );
        const pbart::Id  EDAEventID                = dico.id("EDAEventID"          );
        const pbart::Id  lastRecIDReloaded         = dico.id("lastRecIDReloaded"   );
        const pbart::Id  lastEDAIDReloaded         = dico.id("lastEDAIDReloaded"   );
        const pbart::Id  lastPurgeTimestamp        = dico.id("lastPurgeTimestamp"  );
        const pbart::Id  lastRecIDBeforePurge      = dico.id("lastRecIDBeforePurge");
        const pbart::Id  lastPurgedRecID           = dico.id("lastPurgedRecID"     );
        const pbart::Id  uniqueEventID             = dico.id("uniqueEventID"       );
        const pbart::Id  statisticsId              = dico.id("URdvStatistics"      );
        const pbart::Id  cValueId                  = dico.id("StRdvClientOrderStatistics");
        const pbart::Id  mValueId                  = dico.id("StRdvMarketOrderStatistics");
        const pbart::Id  eValueId                  = dico.id("StRdvExecutionStatistics"  );
        const pbart::Id  foreignSystem             = dico.id("EForeignSystem");
        const pbart::Id  id                        = dico.id("UIdT_Id"       );
        const pbart::Id  subId                     = dico.id("UIdT_subId"    );
        const pbart::Id  lValue                    = dico.id("lValue"    );
        const pbart::Id  sValue                    = dico.id("sValue"    );
        const pbart::Id  tradingMode               = dico.id("synapse::business::order::ETradingMode");
        const pbart::Id  crds                      = dico.id("crds"                        );
        const pbart::Id  mnemo                     = dico.id("mnemo"                       );
        const pbart::Id  bookingCodeId             = dico.id("synapse::misc::StBookingCode");
        const pbart::Id  account                   = dico.id("account"                     );
        const pbart::Id  eBookingCodeType          = dico.id("EBookingCodeType");
        const pbart::Id  productDefId              = dico.id("synapse::business::StProductDef");
        const pbart::Id  codeId                    = dico.id("StProductCode");
        const pbart::Id  codeType                  = dico.id("EProductCodeType");
        const pbart::Id  marketPlace               = dico.id("marketPlace"                           );
        const pbart::Id  marketSegment             = dico.id("marketSegment"                         );
        const pbart::Id  exchangeCode              = dico.id("exchangeCode"                          );
        const pbart::Id  activity                  = dico.id("activity"                              );
        const pbart::Id  portfolio                 = dico.id("portfolio"                             );
        const pbart::Id  profitCenter              = dico.id("profitCenter"                          );
        const pbart::Id  creator                   = dico.id("creator"                               );
        const pbart::Id  lastTrader                = dico.id("lastTrader"                            );
        const pbart::Id  SaleInCharge              = dico.id("SaleInCharge"                          );
        const pbart::Id  visibilityGroup           = dico.id("visibilityGroup"                       );
        const pbart::Id  handlingCode              = dico.id("handlingCode"                          );
        const pbart::Id  ETradingMode              = dico.id("synapse::business::order::ETradingMode");
        const pbart::Id  ECurrency                 = dico.id("synapse::common::ECurrency"            );
        const pbart::Id  side                      = dico.id("synapse::business::ESide"              );
        const pbart::Id  EBookingType              = dico.id("synapse::business::order::EBookingType");
        const pbart::Id  hardToBorrowInfo          = dico.id("hardToBorrowInfo"                      );
        const pbart::Id  EMarginInfo               = dico.id("synapse::business::order::EMarginInfo" );
        const pbart::Id  EBookingState             = dico.id("synapse::misc::EBookingState"          );
        const pbart::Id  isNonStandardSettlement   = dico.id("isNonStandardSettlement"               );
        const pbart::Id  isGuarantedOrder          = dico.id("isGuarantedOrder"                      );
        const pbart::Id  isHardToBorrow            = dico.id("isHardToBorrow"                        );
        const pbart::Id  isCSA                     = dico.id("isCSA"                                 );
        const pbart::Id  isRealTimeExec            = dico.id("isRealTimeExec"                        );
        const pbart::Id  isSRD                     = dico.id("isSRD"                                 );
        const pbart::Id  isContinuousTradingOnly   = dico.id("isContinuousTradingOnly"               );
        const pbart::Id  isOutCry                  = dico.id("isOutCry"                              );
        const pbart::Id  sollicited                = dico.id("sollicited"                            );
        const pbart::Id  clientAccountId           = dico.id("clientAccountId"                       );
        const pbart::Id  investorId                = dico.id("investorId"                            );
        const pbart::Id  connectivityIssuerId      = dico.id("connectivityIssuerId"                  );
        const pbart::Id  terminalId                = dico.id("terminalId"                            );
        const pbart::Id  isStrategy                = dico.id("isStrategy"                            );
        const pbart::Id  EProductCodeType          = dico.id("EProductCodeType"                      );
        const pbart::Id  myName                    = dico.id("myName"                                );
        const pbart::Id  seqFields                 = dico.id("synapse::common::SeqFields");
        const pbart::Id  name1                     = dico.id("name1");
        const pbart::Id  name2                     = dico.id("name2");
        const pbart::Id  name3                     = dico.id("name3");
        const pbart::Id  name4                     = dico.id("name4");
        const pbart::Id  name5                     = dico.id("name5");
        const pbart::Id  name6                     = dico.id("name6");
        const pbart::Id  EBookingCodeType          = dico.id("EBookingCodeType"                      );
        const pbart::Id  StDateTime                = dico.id("synapse::common::StDateTime"           );
        const pbart::Id  StProductLegId            = dico.id("StProductLeg");
        const pbart::Id  StProductCodeId           = dico.id("StProductCode");
        const pbart::Id  quantity                  = dico.id("quantity");
        const pbart::Id  tradingCurrency           = dico.id("synapse::common::ECurrency"            );
        const pbart::Id  receptionDate             = dico.id("synapse::common::UTime"                );
        const pbart::Id  bookingType               = dico.id("synapse::business::order::EBookingType");
        const pbart::Id  marginInfo                = dico.id("synapse::business::order::EMarginInfo" );
        const pbart::Id  bookingState              = dico.id("synapse::misc::EBookingState"          );
        const pbart::Id  eventTime                 = dico.id("synapse::common::StDateTime"           );

        originalMessage = serializer.message(uEventData);
        pbart::Message& stOrder = addEmptySubMsg (originalMessage,  stOrderId);
        pbart::Message& root    = addEmptySubMsg (stOrder, rootId);
        root.set(msgType      ,(long) synapse::message::emtCrossExecMsg);
        root.set(eventId      ,123);
        //o root.rdvStatistics;
        root.set(type          ,"stOrder.root.type");
        root.set(eventName     ,"stOrder.root.eventName");
        root.set(subEventName  ,"stOrder.root.subEventName");
        root.set(transientData ,true);
        //o root.EDAEventID;
        //o ...
        pbart::Variant::SeqMessage& statistics  = addEmptySeqMsg (root, statisticsId);
        statistics.resize(10);
        {
            statistics[0] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[0], cValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"cValue0-");
            addEmptySubMsg(fid,subId).set(sValue,"cValue0_");
        }{
            statistics[1] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[1], eValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"eValue1-");
            addEmptySubMsg(fid,subId).set(sValue,"eValue1_");
        }{
            statistics[2] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[2], mValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"mValue2-");
            addEmptySubMsg(fid,subId).set(sValue,"mValue2_");
        }{
            statistics[3] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[3], cValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"cValue3-");
            addEmptySubMsg(fid,subId).set(sValue,"cValue3_");
        }{
            statistics[4] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[4], eValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"eValue4-");
            addEmptySubMsg(fid,subId).set(sValue,"eValue4_");
        }{
            statistics[5] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[5], mValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"mValue5-");
            addEmptySubMsg(fid,subId).set(sValue,"mValue5_");
        }{
            statistics[6] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[6], cValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"cValue6-");
            addEmptySubMsg(fid,subId).set(sValue,"cValue6_");
        }{
            statistics[7] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[7], eValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"eValue7-");
            addEmptySubMsg(fid,subId).set(sValue,"eValue7_");
        }{
            statistics[8] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[8], mValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"mValue8-");
            addEmptySubMsg(fid,subId).set(sValue,"mValue8_");
        }{
            statistics[9] = serializer.message(statisticsId);
            pbart::Message& val = addEmptySubMsg(statistics[9], cValueId);
            pbart::Message& fid = addEmptySubMsg(val, fidId);
            fid.set(foreignSystem, (long) synapse::misc::efsForce);
            addEmptySubMsg(fid,   id).set(sValue,"cValue9-");
            addEmptySubMsg(fid,subId).set(sValue,"cValue9_");
        }

        pbart::Message& fid     = addEmptySubMsg (stOrder,  fidId);
        fid.set(foreignSystem, (long) synapse::misc::efsForce);
        addEmptySubMsg(fid,   id).set(sValue,"ABSC");
        addEmptySubMsg(fid,subId).set(sValue,"ABSC");

        pbart::Message& iSection = addEmptySubMsg (stOrder,  iSectionId);
        pbart::Message& clientId = addEmptySubMsg (iSection, clientIdId);
        clientId.set(crds ,   "crds");
        clientId.set(mnemo,   "mnem");
        clientId.set(account, "ABCt");
        pbart::Message& bookingCode = addEmptySubMsg (clientId,  bookingCodeId);
        bookingCode.set(sValue, "ABCv");
        bookingCode.set(eBookingCodeType, (long) synapse::misc::ebcCrdsCode);
        //o connectivityInfo;
        iSection.set (tradingMode, (long) synapse::business::order::etmDMA);
        pbart::Message& productDef = addEmptySubMsg (iSection,  productDefId);
        pbart::Variant::SeqMessage& codes  = addEmptySeqMsg (productDef, codeId);
        codes.resize(50);
        for (int i=0; i<50; i++) {
            codes[i] = serializer.message(codeId);
            codes[i].set(codeType, (long) synapse::business::epctForce);
            codes[i].set(sValue  , std::string("productDef") + char('A' + char(i%26)));
        }
        pbart::Message& desc = addEmptySubMsg (productDef,  seqFields);
        desc.set(name1,"11111");
        desc.set(name2,"22222");
        desc.set(name3,"33333");
        desc.set(name4,"44444");
        desc.set(name5,"55555");
        desc.set(name6,"66666");
        productDef.set(isStrategy, true);
        pbart::Variant::SeqMessage& legs = addEmptySeqMsg (productDef, StProductLegId);
        legs.resize(50);
        for (int i=0; i<50; i++) {
            legs[i] = serializer.message(StProductLegId);
            pbart::Variant::SeqMessage& codes = addEmptySeqMsg (legs[i], StProductCodeId);
            codes.resize(50);
            for (int j=0; j<50; j++) {
                codes[j] = serializer.message (StProductCodeId);
                codes[j].set(codeType, (long) synapse::business::epctForce);
                //o     codes[j].customCode;
                codes[j].set(sValue, std::string("leg") + char('0' + char(i%10)));
            }
            pbart::Message& desc = addEmptySubMsg (legs[i],  seqFields);
            desc.set(name1,"11111");
            desc.set(name2,"22222");
            desc.set(name3,"33333");
            desc.set(name4,"44444");
            desc.set(name5,"55555");
            desc.set(name6,"66666");
            legs[i].set(quantity, 42);
            legs[i].set(side    , (long) synapse::business::esdShortLocate);
        }

        iSection.set (tradingCurrency,  (long) synapse::common::EUR);
        iSection.set (marketPlace    ,  "PARIS");
        iSection.set (marketSegment  ,  "ALTERNEXT");
        iSection.set (exchangeCode   ,  "ISIN1234");
        iSection.set (receptionDate  , double((((((2013LL*12 + 03)*30 + 23)*24 + 15)*60 + 15)*60 + 15)*1000 + 123456.0/1000));
        iSection.set (side           , (long) synapse::business::esdShortSellExempt);
        //o iSection.activity;
        iSection.set (portfolio      , "stOrder.iSection.portfolio");
        //o iSection.profitCenter;
        iSection.set (bookingType    , (long) synapse::business::order::ebtTotalReturnSwap);
        iSection.set (creator        , "stOrder.iSection.creator");
        //o iSection.lastTrader;
        //o iSection.SaleInCharge;
        //o iSection.visibilityGroup;
        //o iSection.handlingCode;
        iSection.set (isNonStandardSettlement, true);
        iSection.set (isGuarantedOrder       , false);
        iSection.set (isHardToBorrow         , true);
        //o iSection.hardToBorrowInfo;
        iSection.set (marginInfo             , (long) synapse::business::order::emiCash);
        iSection.set (bookingState           , (long) synapse::misc::ebsBooked);
        iSection.set (isCSA                  , true);
        iSection.set (isRealTimeExec         , false);
        iSection.set (isSRD                  , true);
        iSection.set (isContinuousTradingOnly, false);
        iSection.set (isOutCry               , true);
        iSection.set (sollicited             , false);
        iSection.set (eventTime              , double((((((2013LL*12 + 3)*30 + 23)*24 + 15)*60 + 15)*60 + 15)*1000) + 123456.0/1000);
        pbart::Message& extFields = addEmptySubMsg (iSection,  seqFields);
        extFields.set(name1,"11111");
        extFields.set(name2,"22222");
        extFields.set(name3,"33333");
        extFields.set(name4,"44444");
        extFields.set(name5,"55555");
        extFields.set(name6,"66666");
    }

}; //class Big

CPPUNIT_TEST_SUITE_REGISTRATION( Big );

//-----------------------------------------------------------------------------
std::string Big::EncodeUsingProtoc()
{
    ::UEventData msg;
    ::StClientOrderInternalSectionMsg* stOrder = msg.mutable_stclientorderinternalsectionmsg();
    ::StRoot*                          root    = stOrder->mutable_stroot();
    root->set_emessagetype( synapse::message::emtCrossExecMsg );
    root->set_eventid(123);
    //o root.rdvStatistics;
    root->set_type(          "stOrder.root.type");
    root->set_eventname(     "stOrder.root.eventName");
    root->set_subeventname(  "stOrder.root.subEventName");
    root->set_transientdata(true);
    //o root.EDAEventID;
    //o ...
    ::google::protobuf::RepeatedPtrField< ::URdvStatistics >* statistics = root->mutable_urdvstatistics();
    statistics->Reserve(10);
    {
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvClientOrderStatistics* val = sta->mutable_strdvclientorderstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("cValue0-");
        fid->mutable_uidt_subid()->set_svalue("cValue0_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvExecutionStatistics*   val = sta->mutable_strdvexecutionstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("eValue1-");
        fid->mutable_uidt_subid()->set_svalue("eValue1_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvMarketOrderStatistics* val = sta->mutable_strdvmarketorderstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("mValue2-");
        fid->mutable_uidt_subid()->set_svalue("mValue2_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvClientOrderStatistics* val = sta->mutable_strdvclientorderstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("cValue3-");
        fid->mutable_uidt_subid()->set_svalue("cValue3_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvExecutionStatistics*   val = sta->mutable_strdvexecutionstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("eValue4-");
        fid->mutable_uidt_subid()->set_svalue("eValue4_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvMarketOrderStatistics* val = sta->mutable_strdvmarketorderstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("mValue5-");
        fid->mutable_uidt_subid()->set_svalue("mValue5_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvClientOrderStatistics* val = sta->mutable_strdvclientorderstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("cValue6-");
        fid->mutable_uidt_subid()->set_svalue("cValue6_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvExecutionStatistics*   val = sta->mutable_strdvexecutionstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("eValue7-");
        fid->mutable_uidt_subid()->set_svalue("eValue7_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvMarketOrderStatistics* val = sta->mutable_strdvmarketorderstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("mValue8-");
        fid->mutable_uidt_subid()->set_svalue("mValue8_");
    }{
        ::URdvStatistics* sta = statistics->Add();
        ::StRdvClientOrderStatistics* val = sta->mutable_strdvclientorderstatistics();
        ::SynapseMiscStFid*           fid = val->mutable_synapsemiscstfid();
        fid->set_eforeignsystem( synapse::misc::efsForce );
        fid->mutable_uidt_id   ()->set_svalue("cValue9-");
        fid->mutable_uidt_subid()->set_svalue("cValue9_");
    }

    ::SynapseMiscStFid* fid = stOrder->mutable_synapsemiscstfid();
    fid->set_eforeignsystem( synapse::misc::efsForce );
    fid->mutable_uidt_id   ()->set_svalue("ABSC");
    fid->mutable_uidt_subid()->set_svalue("ABSC");

    ::SynapseObsClientCashStOrderDefInternalSection* iSection = stOrder ->mutable_synapseobsclientcashstorderdefinternalsection();
    ::SynapseObsClientStClientId*                    clientId = iSection->mutable_synapseobsclientstclientid();
    clientId->set_crds(    "crds");
    clientId->set_mnemo(   "mnem");
    clientId->set_account( "ABCt");
    SynapseMiscStBookingCode* bookingCode = clientId->mutable_synapsemiscstbookingcode();
    bookingCode->set_svalue( "ABCv");
    bookingCode->set_ebookingcodetype( (long) synapse::misc::ebcCrdsCode);
    //o connectivityInfo;
    iSection->set_synapsebusinessorderetradingmode( (long) synapse::business::order::etmDMA);
    ::SynapseBusinessStProductDef* productDef = iSection->mutable_synapsebusinessstproductdef();
    ::google::protobuf::RepeatedPtrField< ::StProductCode >* codes = productDef->mutable_stproductcode();
    codes->Reserve(50);
    for (int i=0; i<50; i++) {
        ::StProductCode* code = codes->Add();
        code->set_eproductcodetype( (long) synapse::business::epctForce);
        code->set_svalue  ( std::string("productDef") + char('A' + char(i%26)));
    }
    ::SynapseCommonSeqFields* desc = productDef->mutable_synapsecommonseqfields();
    desc->set_name1("11111");
    desc->set_name2("22222");
    desc->set_name3("33333");
    desc->set_name4("44444");
    desc->set_name5("55555");
    desc->set_name6("66666");
    productDef->set_isstrategy( true);
    ::google::protobuf::RepeatedPtrField< ::StProductLeg >* legs = productDef->mutable_stproductleg();
    legs->Reserve(50);
    for (int i=0; i<50; i++) {
        ::StProductLeg* leg = legs->Add();
        ::google::protobuf::RepeatedPtrField< ::StProductCode >* codes = leg->mutable_stproductcode();
        codes->Reserve(50);
        for (int j=0; j<50; j++) {
            ::StProductCode* code = codes->Add();
            code->set_eproductcodetype( (long) synapse::business::epctForce);
            //o     codes[j].customCode;
            code->set_svalue  ( std::string("leg") + char('0' + char(i%10)));
        }
        ::SynapseCommonSeqFields* desc = leg->mutable_synapsecommonseqfields();
        desc->set_name1("11111");
        desc->set_name2("22222");
        desc->set_name3("33333");
        desc->set_name4("44444");
        desc->set_name5("55555");
        desc->set_name6("66666");
        leg->set_quantity( 42);
        leg->set_synapsebusinesseside( (long) synapse::business::esdShortLocate);
    }

    iSection->set_synapsecommonecurrency(  (long) synapse::common::EUR);
    iSection->set_marketplace    (  "PARIS");
    iSection->set_marketsegment  (  "ALTERNEXT");
    iSection->set_exchangecode   (  "ISIN1234");
    iSection->set_synapsecommonutime( double((((((2013LL*12 + 3)*30 + 23)*24 + 15)*60 + 15)*60 + 15)*1000) + 123456.0/1000);
    iSection->set_synapsebusinesseside( (long) synapse::business::esdShortSellExempt);
    //o iSection.activity;
    iSection->set_portfolio      ( "stOrder.iSection.portfolio");
    //o iSection.profitCenter;
    iSection->set_synapsebusinessorderebookingtype    ( (long) synapse::business::order::ebtTotalReturnSwap);
    iSection->set_creator        ( "stOrder.iSection.creator");
    //o iSection.lastTrader;
    //o iSection.SaleInCharge;
    //o iSection.visibilityGroup;
    //o iSection.handlingCode;
    iSection->set_isnonstandardsettlement( true);
    iSection->set_isguarantedorder       ( false);
    iSection->set_ishardtoborrow         ( true);
    //o iSection.hardToBorrowInfo;
    iSection->set_synapsebusinessorderemargininfo             ( (long) synapse::business::order::emiCash);
    iSection->set_synapsemiscebookingstate           ( (long) synapse::misc::ebsBooked);
    iSection->set_iscsa                  ( true);
    iSection->set_isrealtimeexec         ( false);
    iSection->set_issrd                  ( true);
    iSection->set_iscontinuoustradingonly( false);
    iSection->set_isoutcry               ( true);
    iSection->set_sollicited             ( false);
    iSection->set_synapsecommonstdatetime( ((((((2013LL*12 + 03)*30 + 23)*24 + 15)*60 + 15)*60 + 15)*1000 + 123456.0/1000));
    ::SynapseCommonSeqFields* extFields = iSection->mutable_synapsecommonseqfields();
    extFields->set_name1("11111");
    extFields->set_name2("22222");
    extFields->set_name3("33333");
    extFields->set_name4("44444");
    extFields->set_name5("55555");
    extFields->set_name6("66666");

    std::string data;
    msg.SerializeToString (&data);
    return data;
}

bool Big::DecodeUsingProtoc (const std::string& data)
{
    ::UEventData msg;
    return msg.ParseFromString (data);
}
